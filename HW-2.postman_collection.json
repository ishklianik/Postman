{
	"info": {
		"_postman_id": "78fe57f4-e521-4f99-8b8c-66fe6b3f535a",
		"name": "HW-2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16000569"
	},
	"item": [
		{
			"name": "Отправить зарос first. Проверить что приходит ответ с кодом 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "162.55.220.72:5005/first",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "Отправить запрос POST user_info_3 + сет автотестов",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. ПРоверит, что код ответа 200\r",
							"// pm.test(\"Status code is 200\", function () {\r",
							"//     pm.response.to.have.status(200);\r",
							"// });\r",
							"\r",
							"//3.  Спарсить response body в json\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"// let responseData = pm.response.json();\r",
							"pm.test(\"Name\", function () {\r",
							"    pm.expect(responseData.name).to.eql('Ann');\r",
							"});\r",
							"// console.log(responseData.name);\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"// let responseData = pm.response.json();\r",
							"pm.test(\"Age\", function () {\r",
							"    pm.expect(Number(responseData.age)).to.eql(35);\r",
							"});\r",
							"// console.log(typeof(responseData.age))\r",
							"// ?? 35 - строка?\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request(salary вбить руками.)\r",
							"// let responseData = pm.response.json();\r",
							"pm.test(\"Salary\", function () {\r",
							"        pm.expect(responseData.salary).to.eql(4000);\r",
							"});\r",
							"\r",
							"//  7. Спарсить request.\r",
							"let req = request.data;\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"// let responseData = pm.response.json();\r",
							"// let req = request.data;\r",
							"pm.test(\"Name_from_req\", function () {\r",
							"    pm.expect(responseData.name).to.eql(req.name);\r",
							"});\r",
							"// console.log(req.name)\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"// let responseData = pm.response.json();\r",
							"// let req = request.data;\r",
							"pm.test(\"Age_from_req\", function () {\r",
							"      pm.expect(responseData.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"// let responseData = pm.response.json();\r",
							"// let req = request.data;\r",
							"// pm.test(\"Salary_from_req\", function () {\r",
							"//       pm.expect(responseData.salary).to.eql(JSON.stringify(req.salary));\r",
							"// });\r",
							"pm.test(\"Salary_from_req\", function () {\r",
							"      pm.expect(String(responseData.salary)).to.eql(req.salary);\r",
							"});\r",
							"\r",
							"// console.log(typeof(JSON.stringify(req.salary)))\r",
							"console.log(typeof(req.salary))\r",
							"console.log(typeof(responseData.salary))\r",
							"// ?? уточнить про 4000 и '4000' -разобраться что отправляем а что получаем\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"// let responseData = pm.response.json();\r",
							"let family_data = responseData.family\r",
							"console.log(family_data)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"// let responseData = pm.response.json();\r",
							"// let req = request.data;\r",
							"let sal_from_req = req.salary\r",
							"let sal_1_5_from_req = sal_from_req * 4\r",
							"pm.test(\"Salary_1_5_year\", function () {\r",
							"      pm.expect(responseData.family.u_salary_1_5_year).to.eql(sal_1_5_from_req);\r",
							"});\r",
							"console.log(`${responseData.family.u_salary_1_5_year}; ${sal_1_5_from_req}`)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Ann",
							"type": "text"
						},
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "4000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "162.55.220.72:5005/user_info_3?name=Ann&age=35&salary=4000",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Ann"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "4000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Oblect_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. ПРоверить Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2. Спарсить response body в json.\r",
							"let responseData = pm.response.json();\r",
							"\r",
							"//3.  Спарсить request.\r",
							"let req_data = pm.request.url.query.toObject();\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let name_res=responseData.name;\r",
							"let name_req=req_data.name\r",
							"pm.test(\"Check name\", function () {\r",
							"        pm.expect(name_res).to.eql( name_req);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let age_req = req_data.age\r",
							"let age_res = responseData.age\r",
							"pm.test(\"Check age\", function () {\r",
							"        pm.expect(age_res).to.eql( age_req);\r",
							"});\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let salary_req = req_data.salary_req\r",
							"let salary_res = responseData.salary_req\r",
							"pm.test(\"Check salary\", function () {\r",
							"        pm.expect(salary_res).to.eql(salary_req);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"let family_data= responseData.family;\r",
							"console.log(family_data)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"let dog_data = responseData.family.pets.dog\r",
							"pm.test(\"Dog has name\", function () {\r",
							"    pm.expect(JSON.stringify(dog_data)).to.include('name')\r",
							"    });\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"pm.test(\"Dog has age\", function () {\r",
							"    pm.expect(JSON.stringify(dog_data)).to.include('age')\r",
							"    });\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"pm.test(\"Dog name = Luky\", function () {\r",
							"    pm.expect(dog_data.name).to.eql(\"Luky\")\r",
							"    });\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog age = 4\", function () {\r",
							"    pm.expect(dog_data.age).to.eql(4)\r",
							"    });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Olga&age=37&salary=5000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Olga"
						},
						{
							"key": "age",
							"value": "37"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"http://162.55.220.72:5005/object_info_4?name=Julia&age=25&salary=5000\r",
							"\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let res_data = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req_data = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let name_res = res_data.name\r",
							"let name_req = req_data.name\r",
							"pm.test(\"Check name\", function () {\r",
							"        pm.expect(name_res).to.eql(name_req);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"let age_res = res_data.age\r",
							"let age_req = req_data.age\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(String(age_res)).to.eql(age_req);\r",
							"})\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"let salary_req = req_data.salary\r",
							"console.log(\"Salary from request : \", salary_req)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"let salary_res = res_data.salary\r",
							"console.log(\"Salare from response : \", salary_res)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(salary_res[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(salary_res[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(salary_res[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check Salary 0 element\", function () {\r",
							"       pm.expect(String(salary_res[0])).to.eql(salary_req);\r",
							"});\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check Salary 1 element\", function () {\r",
							"       pm.expect((salary_res[1])).to.eql(String(salary_req * 2));\r",
							"});\r",
							"// console.log('resp salary0-', typeof( salary_res[0]))\r",
							"// console.log('resp salary1-', typeof( salary_res[1]))\r",
							"// console.log('QUERY*2 -', typeof( salary_req * 2))\r",
							"// console.log('QUERY -', typeof( salary_req))\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check Salary 2 element\", function () {\r",
							"       pm.expect(String(salary_res[2])).to.eql(String(salary_req * 3));\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name\", \"Julia\");\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\", \"25\");\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\", \"5000\");\r",
							"// 18. Передать в окружение переменную name\r",
							"// 19. Передать в окружение переменную age\r",
							"// 20. Передать в окружение переменную salary\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"//21.1- если поиск начинать с salary\r",
							"for( let i=0; i < salary_res.length; i++ ) { \r",
							"console.log(salary_res[i])};\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Vika&age=20&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Vika"
						},
						{
							"key": "age",
							"value": "20"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"pm.environment.get(\"name\");\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"pm.environment.get(\"age\");\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"pm.environment.get(\"salary\");\r",
							"// 4. Отправить запрос.\r",
							"http://162.55.220.72:5005/user_info_2?=&=&=\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"let res_data = pm.response.json()\r",
							"// 7. Спарсить request.\r",
							"let req_data = request.data\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"pm.test(\"Response includes start_qa_salary\", function () {\r",
							"    pm.expect(JSON.stringify(res_data)).to.include(\"start_qa_salary\");\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Response includes qa_salary_after_6_months\", function () {\r",
							"    pm.expect(JSON.stringify(res_data)).to.include(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Response includes qa_salary_after_12_months\", function () {\r",
							"    pm.expect(JSON.stringify(res_data)).to.include(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Response includes qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(JSON.stringify(res_data)).to.include(['qa_salary_after_1.5_year']);\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Response includes qa_salary_after_3.5_year\", function () {\r",
							"    pm.expect(JSON.stringify(res_data)).to.include(['qa_salary_after_3.5_year']);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Response includes person\", function () {\r",
							"    pm.expect(JSON.stringify(res_data)).to.include('person');\r",
							"});\r",
							"// console.log(JSON.stringify(res_data))\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check start_qa_salary\", function () {\r",
							"    pm.expect(String(res_data.start_qa_salary)).to.eql(req_data.salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_6_months\", function () {\r",
							"    pm.expect(res_data.qa_salary_after_6_months).to.eql(req_data.salary*2);\r",
							"});\r",
							" // console.log(typeof(req_data.salary*2))\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_12_months\", function () {\r",
							"    pm.expect(res_data.qa_salary_after_12_months).to.eql(req_data.salary*2.7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"// let salary  = res_data.qa_salary_after_1.5_year\r",
							"\r",
							"pm.test(\"Check qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(res_data[`qa_salary_after_1.5_year`]).to.eql(req_data.salary*3.3);\r",
							"});\r",
							"    \r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_3_5_years\", function () {\r",
							"    pm.expect(res_data[`qa_salary_after_3.5_years`]).to.eql(req_data.salary*3.8);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							" let person_data = res_data.person\r",
							"pm.test(\"Check 1_element = salary_req\", function () {\r",
							"    pm.expect(String(person_data.u_name[1])).to.eql(req_data.salary);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"// let person_data = res_data.person\r",
							"pm.test(\"Check u_age = age\", function () {\r",
							"    pm.expect(String(person_data.u_age)).to.eql(req_data.age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"// let person_data = res_data.person\r",
							"pm.test(\"Check u_salary_5_years \", function () {\r",
							"    pm.expect(person_data.u_salary_5_years).to.eql(req_data.salary*4.2);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"console.log(person_data)\r",
							"// let person_arr = [person_data]\r",
							"//  person_arr.forEach(el => {console.log(el)});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2?=&=&=",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "",
							"value": ""
						},
						{
							"key": "",
							"value": ""
						},
						{
							"key": "",
							"value": ""
						}
					]
				}
			},
			"response": []
		}
	]
}